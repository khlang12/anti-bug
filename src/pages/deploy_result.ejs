<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Deploy & Function interaction</title>
    <style>
        body {
            margin-top: 10px;
            line-height: 1.6;
        }

        .container {
            width: 100%;
            margin: 0 auto;
        }

        ul.tabs {
            width: 100%;
            margin: 0;
            padding: 0;
            list-style: none;
        }

        ul.tabs li {
            width: auto;
            background: none;
            color: #ffffff;
            display: inline-block;
            padding: 10px 15px;
            cursor: pointer;
        }

        ul.tabs li.current {
            background: #82C0DA;
            color: #222;

        }

        .tab-content {
            display: none;
            background: #82C026;
            color: #000000;
            padding: 15px;
        }

        .tab-content.current {
            display: inherit;
        }

        .card {
            background-color: blue;
        }

        .card h3,
        h4 {
            color: white;
            margin: 10px 0 3px 0;
        }

        .card-content {
            background-color: #6d6d6d;
            display: none;
        }

        .card-balance,
        .card-lowLevel {
            padding: 5px 20px 20px 20px;
        }

        .card-balance__funciton {
            display: flex;
        }

        .card-balance__funciton textarea {
            width: 100%;
            resize: none;
        }

        .card-lowLevel__calldata {
            display: flex;
        }

        .card-inline {
            border: 2px solid #ccc;
            margin: 0 10px;
        }

        .button-calldata {
            margin: 2px 0;
        }

        .input-calldata {
            margin: 2px 0;
            width: 100%;
            resize: none;
        }
    </style>
</head>

<body>
    <script>
        document.addEventListener("DOMContentLoaded", async function () {
            const vscode = acquireVsCodeApi();
            console.log(vscode);

            // tab action 구현
            const tabLinks = document.querySelectorAll(".tab-link");
            const tabContents = document.querySelectorAll(".tab-content");

            tabLinks.forEach(function (link) {
                link.addEventListener("click", function () {
                    const tabId = this.getAttribute("data-tab");

                    tabLinks.forEach(function (tabLink) {
                        tabLink.classList.remove("current");
                    });
                    tabContents.forEach(function (tabContent) {
                        tabContent.classList.remove("current");
                    });

                    this.classList.add("current");
                    document.getElementById(tabId).classList.add("current");
                });
            });

            // toggle action 구현
            const toggleButton = document.getElementById("card-button");
            const toggleContent = document.getElementById("card-content");

            toggleButton.addEventListener("click", function () {
                if (toggleContent.style.display === "none" || toggleContent.style.display === "") {
                    toggleContent.style.display = "block";
                } else {
                    toggleContent.style.display = "none";
                }
            });

            // abi function name 가져와서 화면에 출력
            window.addEventListener("message", event => {
                const message = event.data.type;
                console.log("interaction.ts -> deploy_result.ejs -  type —-- ", message);

                if (message === "compileResult" || message === "deployResult") {

                    console.log("deploy_result.ejs - ", message, " 실행중…");
                    const { abis, bytecodes, contract } = event.data.value;

                    console.log("interaction.ts -> deploy_result.ejs - ", message, " abis --- ", abis);
                    console.log("interaction.ts -> deploy_result.ejs - ", message, " bytecodes --- ", bytecodes);
                    console.log("interaction.ts -> deploy_result.ejs - ", message, " contract --- ", contract);

                    // test하려고 위에 뽑은 거 -> 이걸로 복붙 아이콘 만들면 될듯
                    const test = document.getElementById('test-abis');
                    test.textContent = JSON.stringify(abis, null, 2);
                    const testtest = document.getElementById('test-bytecodes');
                    testtest.textContent = bytecodes.toString();

                    // toggle 안에 넣어야 해
                    if (message === "deployResult") {

                        // for 

                        // // 이벤트에서 전달된 abiNames를 사용하여 동적으로 버튼 생성
                        // const { abiNames } = event.data.value;

                        // // 버튼을 추가할 컨테이너 요소 선택
                        // const functionButtonContainer = document.getElementById("function-button");

                        // // abiNames를 반복하며 버튼을 생성
                        // abiNames.forEach((name) => {
                        //     const button = document.createElement("button");
                        //     button.textContent = name;
                        //     button.id = `function-button-${name}`; // 각 버튼의 고유한 ID
                        //     button.addEventListener("click", () => {
                        //         // 버튼 클릭 시 실행할 동작 추가
                        //         console.log(`버튼 ${name}이 클릭되었습니다.`);
                        //         // 이 부분에 원하는 동작 추가
                        //     });

                        //     functionButtonContainer.appendChild(button);
                        // });
                    }
                }
            })

        });
    </script>

    <div class="container">
        <ul class="tabs">
            <li class="tab-link current" data-tab="tab-1">function operation</li>
            <li class="tab-link" data-tab="tab-2">history</li>
        </ul>

        <div id="tab-1" class="tab-content current">
            <h3>Deployed Contract</h3>

            <p>test-abis: </p>
            <p id="test-abis"></p>
            <p>test-bytecodes: </p>
            <p id="test-bytecodes"></p>

            <!-- function button을 생성할 부분 -->
            <div class="card-balance__funciton" id="function-button">
                <!-- 여기에 동적으로 생성된 버튼이 추가될 것입니다 -->
            </div>

            <div class="card">
                <button class="card-button" id="card-button" onclick="cardAction()">▼ EtherStore at ${address}</button>
                <div class="card-content" id="card-content">

                    <div class="card-balance">
                        <h4>Balance : <%= value %>
                                <%= ETH %>
                        </h4>

                        <div class="card-balance__funciton" id="function-button">
                            <p>function-names: </p>
                            <p id="function-names"></p>
                            <p>
                                <%= abiNames.join(', ') %></p>
                        </div>

                    </div>
                    <hr class="card-inline">
                    <div class="card-lowLevel">
                        <h3>Low level interactions</h3>
                        <h4>Calldata</h4>
                        <div class="card-lowLevel__calldata">
                            <textarea class="input-calldata" placeholder="입력하세요"></textarea>
                            <button class="button-calldata">Transact</button>
                        </div>

                    </div>
                </div>
            </div>
        </div>
        <div id="tab-2" class="tab-content">
            tab content2
        </div>
    </div>
</body>

</html>