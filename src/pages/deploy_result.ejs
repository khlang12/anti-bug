<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Deploy & Function interaction</title>
    <style>
        body {
            margin-top: 10px;
            line-height: 1.6;
        }

        .container {
            width: 100%;
            margin: 0 auto;
        }

        ul.tabs {
            width: 100%;
            margin: 0;
            padding: 0;
            list-style: none;
        }

        ul.tabs li {
            width: auto;
            background: none;
            color: #ffffff;
            display: inline-block;
            padding: 10px 15px;
            cursor: pointer;
        }

        ul.tabs li.current {
            background: #82C0DA;
            color: #222;

        }

        .tab-content {
            display: none;
            background: #82C026;
            color: #000000;
            padding: 15px;
        }

        .tab-content.current {
            display: inherit;
        }

        .contract__title {
            display: flex;
            justify-content: space-between;
            column-gap: 10px;

            font-size: 15px;
            font-weight: bold;
            border-top: 1px solid #e9950c;
            border-bottom: 1px solid #3d3d3d;
            padding: 10px 0px;
        }

        .contract__actions {
            display: flex;
            flex-direction: column;
            row-gap: 10px;

            padding: 10px 0px;
        }

        .contract__actions.hidden {
            display: none;
        }

        .function__action-single {
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .function__action-multi {
            display: flex;
            padding: 10px;
            flex-direction: column;
            row-gap: 8px;
        }

        .function__action-multi.hidden {
            display: none;
        }

        .argument {
            display: flex;
            align-items: flex-end;
            column-gap: 10px;
        }

        .argument__name {
            width: 200px;
        }

        .function__action {
            max-width: 150px;
            width: 100%;

            border-radius: 5px;
            background-color: #e9950c;
        }

        .function__action:has(+ input) {
            border-top-right-radius: 0px;
            border-bottom-right-radius: 0px;
        }

        .function__action-single input {
            position: relative;
            top: 1px;
            min-height: 100%;
            border-top-left-radius: 0px;
            border-bottom-left-radius: 0px;
        }

        .function__action:hover {
            background-color: #d1850b;
        }

        .function__action.pure,
        .function__action.view {
            background-color: #2e95d3;
        }

        .function__action.pure:hover,
        .function__action.view:hover {
            background-color: #2887bf;
        }

        .function__action.payable {
            background-color: #f22c3d;
        }

        .function__action.payable:hover {
            background-color: #d22635;
        }
    </style>
</head>

<body>
    <script>
        document.addEventListener("DOMContentLoaded", async function () {
            const vscode = acquireVsCodeApi();
            console.log(vscode);

            // tab action 구현
            const tabLinks = document.querySelectorAll(".tab-link");
            const tabContents = document.querySelectorAll(".tab-content");

            tabLinks.forEach(function (link) {
                link.addEventListener("click", function () {
                    const tabId = this.getAttribute("data-tab");

                    tabLinks.forEach(function (tabLink) {
                        tabLink.classList.remove("current");
                    });
                    tabContents.forEach(function (tabContent) {
                        tabContent.classList.remove("current");
                    });

                    this.classList.add("current");
                    document.getElementById(tabId).classList.add("current");
                });
            });

            // toggle action 구현
            // const toggleButton = document.getElementById("card-button");
            // const toggleContent = document.getElementById("card-content");

            // toggleButton.addEventListener("click", function () {
            //     if (toggleContent.style.display === "none" || toggleContent.style.display === "") {
            //         toggleContent.style.display = "block";
            //     } else {
            //         toggleContent.style.display = "none";
            //     }
            // });

            function makeChevronDownButtonElement() {
                const chevronDownButtonElement = document.createElement("div");
                const chevronDownIconElement = document.createElement("i");
                chevronDownIconElement.classList.add(
                    "fas",
                    "fa-chevron-down",
                    "dropdown-action"
                );
                chevronDownButtonElement.style.cursor = "pointer";

                chevronDownButtonElement.appendChild(chevronDownIconElement);
                return chevronDownButtonElement;
            }

            function makeMultiArgsElements(inputs) {
                const argsElements = inputs.map(({ name, type }) => {
                    const argElement = document.createElement("div");
                    argElement.classList.add("argument");

                    const inputNameElement = document.createElement("div");
                    inputNameElement.classList.add("argument__name");
                    inputNameElement.innerHTML = `${type} ${name}`;

                    const inputElement = document.createElement("input");

                    argElement.appendChild(inputNameElement);
                    argElement.appendChild(inputElement);

                    return argElement;
                });

                return argsElements;
            }

            // abi function name 가져와서 화면에 출력
            window.addEventListener("message", event => {
                const message = event.data.type;
                console.log("interaction.ts -> deploy_result.ejs -  type —-- ", message);

                if (message === "compileResult" || message === "deployResult") {

                    console.log("deploy_result.ejs - ", message, " 실행중…");
                    const { abis, bytecodes, contract } = event.data.value;

                    console.log("interaction.ts -> deploy_result.ejs - ", message, " abis --- ", abis);
                    console.log("interaction.ts -> deploy_result.ejs - ", message, " bytecodes --- ", bytecodes);
                    console.log("interaction.ts -> deploy_result.ejs - ", message, " contract --- ", contract);

                    // test하려고 위에 뽑은 거
                    const test = document.getElementById('test-abis');
                    test.textContent = JSON.stringify(abis, null, 2);
                    const testtest = document.getElementById('test-bytecodes');
                    testtest.textContent = bytecodes.toString();

                    const contractInteractionElement = document.querySelector(".contract__interaction");

                    // toggle 안에 넣어야 해
                    if (message === "deployResult") {

                        const contractList = contract;

                        contractList.forEach(contract => {
                            const contractName = contract.contractName;
                            const contractAbis = contract.newABIs;

                            console.log(contractName, contractAbis);

                            const onlyFunctionAbis = contractAbis.filter(({ type }) => type === "function");
                            const contractElement = document.createElement("div");
                            contractElement.classList.add("contract");

                            const contractTitleElement = document.createElement("div");
                            const contractNameElement = document.createElement("p");
                            const contractChevronDownButtonElement = makeChevronDownButtonElement();
                            const contractActionsWrapperElement = document.createElement("div");
                            contractActionsWrapperElement.classList.add("contract__actions");

                            contractTitleElement.classList.add("contract__title");
                            contractTitleElement.appendChild(contractNameElement);
                            contractNameElement.innerHTML = contractName;
                            contractTitleElement.appendChild(contractNameElement);

                            contractElement.appendChild(contractTitleElement);
                            contractTitleElement.appendChild(contractChevronDownButtonElement);

                            contractChevronDownButtonElement.addEventListener("click", () => {
                                contractActionsWrapperElement.classList.toggle("hidden");
                            });

                            const functionElements = onlyFunctionAbis.map(
                                ({ name, inputs, stateMutability, type, signature }) => {
                                    const functionElement = document.createElement("div");
                                    functionElement.classList.add("function");

                                    const functionActionSingleElement = document.createElement("div");
                                    functionActionSingleElement.classList.add(
                                        "function__action-single"
                                    );

                                    const functionActionMultiElement = document.createElement("div");
                                    functionActionMultiElement.classList.add(
                                        "function__action-multi",
                                        "hidden"
                                    );

                                    let argsElement = [];

                                    const actionElement = document.createElement("button");
                                    actionElement.innerHTML = name;
                                    actionElement.classList.add(stateMutability, "function__action");
                                    functionActionSingleElement.appendChild(actionElement);

                                    if (inputs.length === 1) {
                                        const inputElement = document.createElement("input");
                                        inputElement.placeholder = `${inputs[0].type} ${inputs[0].name}`;
                                        argsElement = [inputElement];
                                        functionActionSingleElement.appendChild(inputElement);
                                    }

                                    if (inputs.length > 1) {
                                        const chevronDownButtonElement = makeChevronDownButtonElement();
                                        chevronDownButtonElement.addEventListener("click", () => {
                                            functionActionMultiElement.classList.toggle("hidden");
                                        });
                                        functionActionSingleElement.appendChild(chevronDownButtonElement);

                                        argsElement = makeMultiArgsElements(inputs);
                                        functionActionMultiElement.replaceChildren(...argsElement);
                                    }

                                    actionElement.addEventListener("click", () => {
                                        console.log(argsElement);
                                        const args = argsElement.map(
                                            (argElement) => argElement.childNodes[1].value
                                        );

                                        console.log(contractAddressText.innerHTML);
                                        vscode.postMessage({
                                            type: "call",
                                            value: {
                                                signature,
                                                args,
                                                name,
                                                to: contractAddressText.innerHTML,
                                                fromPrivateKey: addressSelect.value,
                                                value: ethInput.value, // TODO
                                            },
                                        });
                                    });

                                    functionElement.replaceChildren(functionActionSingleElement);
                                    functionElement.appendChild(functionActionMultiElement);

                                    return functionElement;
                                }
                            );
                            contractActionsWrapperElement.replaceChildren(...functionElements);

                            contractElement.appendChild(contractTitleElement);
                            contractElement.appendChild(contractActionsWrapperElement);

                            contractInteractionElement.appendChild(contractElement);

                        })
                    }
                }

            });
        });
    </script>

    <div class="container">
        <ul class="tabs">
            <li class="tab-link current" data-tab="tab-1">function operation</li>
            <li class="tab-link" data-tab="tab-2">history</li>
        </ul>

        <div id="tab-1" class="tab-content current">
            <h3>Deployed Contract</h3>

            <p>test-abis: </p>
            <p id="test-abis"></p>
            <p>test-bytecodes: </p>
            <p id="test-bytecodes"></p>

            <!-- contract interaction 동적생성 -->
            <div class="contract__interaction"></div>
        </div>
        <div id="tab-2" class="tab-content">

            <!-- contract interaction 동적생성 -->
            <div class="contract__interaction"></div>
        </div>
    </div>
</body>

</html>